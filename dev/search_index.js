var documenterSearchIndex = {"docs":
[{"location":"structs/sfs/#Structure-Frames-and-related-constructs","page":"Structure Frames","title":"Structure Frames and related constructs","text":"","category":"section"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"Throughout the model, the concept of a StructureFrame is used. It is a representation of a configuration of a set of atoms, molecules, or residues that are used to describe protein structure. As proteins are flexible polymers, it was deemed reasonable to write representations that can be recycled easily when only the atomic positions change and not the system topology (atom and residue numbers and connectivities).","category":"page"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"This is also partly the reason why StructureFrames are not hierarchical models.","category":"page"},{"location":"structs/sfs/#StructureFrames","page":"Structure Frames","title":"StructureFrames","text":"","category":"section"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"As was introduced in the walkthrough, reading PDB files yields StructureFrame objects. This terminology comes from Chemfiles (historic).","category":"page"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"StructureFrame objects are defined as the following:","category":"page"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"struct StructureFrame\n    step::UInt\n    at_pos::Vector{SVector{3,T<:AbstractFloat}}\n    at_list::Vector{JAtom}\n    res_list::Vector{JResidue}\nend","category":"page"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"Above JAtom and JResidue types structs correspond to Atom and Residue types from Chemfiles. They are named as such to not have naming conflicts between modules. These types are explored further in subsections below.","category":"page"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"The step property is an integer dictating the step number of a frame, in a possibly unordered collection of frames[1], and can be used to sort frames accordingly. This frame has its own set of positions for each atom. Thus, a limitation that length(at_pos) == length(at_list) must be imposed.","category":"page"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"Now, each atom in the frame belongs to a residue, whether it be an amino acid, nucleic acid, ligand, ion, or solvent. Residues must be mutually exclusive, i.e. an atom belongs to exactly one residue. There is no imposed order on residues, but it is expected that they are grouped by \"chains\" and are ordered by their respective sequence numbers (for amino/nucleic acids).","category":"page"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"[1]: One way this can happen is through parallel reading of input. In principle, it can be done, though it is not recommended.","category":"page"},{"location":"structs/sfs/#Residues-and-JResidue","page":"Structure Frames","title":"Residues and JResidue","text":"","category":"section"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"Residues are a collection of atoms corresponding to a logical unit. For proteins or nucleic acids (standard PDB residues) they are amino acid residues and nucleic acid residues, respecitively. In PDB files, atoms of these residues are annotated as ATOM. In addition to these, other atoms may be listed such as water molecules or ligands such as heme. Atoms of these residues are annotated as HETATM.","category":"page"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"JResidue structs have the following properties:","category":"page"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"chainid::String: chain identifier of the residue in which it belongs\nname::Symbol: name of the residue as described in the PDB input\nstandard_pdb:Bool: whether atoms in the residue are annotated with ATOM or HETATM[2]\nat_dict: Dict object containing symbols to indices of JAtoms included in the residue","category":"page"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"[2]: Name is derived from Chemfiles.","category":"page"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"Types of members are experimental and are expected to change depending on usage and benchmark tests.","category":"page"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"Entries of the at_dict property are of the form :CA=>0x02 suggesting that an atom with name :CA belonging to this residue can be found at index 0x02 of the at_list property of the parent StructureFrame. Similarly, its position can be found at the same index of the at_pos property.","category":"page"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"For readability, the function getatom is provided","category":"page"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"# here res is a JResidue\nNid = res.at_dict[:N]       # gives index of the amide nitrogen in the residue\nframe.at_pos[Nid]           # its atomic coordinates\nframe.at_list[Nid]          # its atom properties\n\nNid == getatom(res, :N)     # the same behavior as res.at_dict[:N]","category":"page"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"For there are plans for abstraction of this residue type, it is recommended to use getatom in code using this behavior.","category":"page"},{"location":"structs/sfs/#Atoms-and-JAtom","page":"Structure Frames","title":"Atoms and JAtom","text":"","category":"section"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"Atoms are the particles being tracked in full-atom simulations/calculations. Representations can contain information such as the mass and charge of the particle. The module exports the JAtom struct containing the following fields:","category":"page"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"name::Symbol: atom name that can be used for referencing;\ntype::String: atom (nucleus) element type;\nmass::T<:AbstractFloat: atom mass;\ncharge::T<:AbstractFloat: atom charge","category":"page"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"Note that this is only a subset of the information that can be obtained from a Chemfiles Frame. There are plans to declare this as a subtype of AbstractAtom to allow for different atom types containing various pieces of information depending on the analyses.","category":"page"},{"location":"structs/sfs/#Abstract-Frames","page":"Structure Frames","title":"Abstract Frames","text":"","category":"section"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"There are plans to extend the current functionality to abstract types. So far, two flavors are in mind:","category":"page"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"SFLike implementations similar to StructureFrame;\nother frame implementations","category":"page"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"StructureFrame-like constructs can be assigned to act like StructureFrames. This can make current basic definitions on StructureFrames apply to the new types. Extension is thought to be based on properties, i.e. overloading Base.getproperty.","category":"page"},{"location":"structs/sfs/","page":"Structure Frames","title":"Structure Frames","text":"As of now, there are no plans regarding hierarchical frame structures.","category":"page"},{"location":"start/#Brief-walkthrough","page":"Brief walkthrough","title":"Brief walkthrough","text":"","category":"section"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"As introduced, the module provides some types and methods for reading PDB files, which can be integrated with trajectories from files that can be read using Chemfiles.jl. Most of these are used for secondary structure assignments.","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"Most of the needed information regarding protein structure is contained in a StructureFrame construct. Functions acting on the StructureFrame or its derivatives can yield useful information regarding structure. These functions will be introduced later on.","category":"page"},{"location":"start/#Reading-from-PDB-and-StructureFrames","page":"Brief walkthrough","title":"Reading from PDB and StructureFrames","text":"","category":"section"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"The module provides two ways of generating StructureFrames from PDB files:","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"From a Chemfiles Frame object;\nDirectly from PDB files","category":"page"},{"location":"start/#Reading-from-a-Chemfiles-Frame","page":"Brief walkthrough","title":"Reading from a Chemfiles Frame","text":"","category":"section"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"A StructureFrame can be obtained from extracting information from a Chemfiles Frame through the extractframe function:","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"import Chemfiles\n\nstructs = Chemfiles.Trajectory(\"path/to/file.pdb\") do traj\n    frame = read(traj)      ## obtains a Frame object\n    extractframe(frame)     ## extract from the frame to get StructureFrame\nend","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"So far, this extraction method takes a long time to complete. If performance in reading structures is not as important, then one may choose to use this method. Otherwise, if performance is critical, it may be wiser to extract directly from PDB files, as shown in the next subsection.","category":"page"},{"location":"start/#Reading-directly-from-PDB-files","page":"Brief walkthrough","title":"Reading directly from PDB files","text":"","category":"section"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"A StructureFrame can also be parsed from information directly from a PDB file. However, note that the amount of information about atoms is limited for this method compared to the first [1].","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"[1]: This will be fixed soon if there is sufficient motivation to do so. So far, it is not yet needed.","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"using ProtStructs\n\nstructs = read(\"path/to/file.pdb\", StructureFrame)","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"In at least one benchmark, the above parsing method is only slightly faster than that provided by BioStructures.jl. This is likely due to the fact that less information is read and that the data model is not hierarchical.","category":"page"},{"location":"start/#On-the-StructureFrame-object","page":"Brief walkthrough","title":"On the StructureFrame object","text":"","category":"section"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"StructureFrame objects are defined as the following:","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"struct StructureFrame\n    step::UInt\n    at_pos::Vector{SVector{3,T<:AbstractFloat}}\n    at_list::Vector{JAtom}\n    res_list::Vector{JResidue}\nend","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"Above JAtom and JResidue types structs correspond to Atom and Residue types from Chemfiles. They are named as such to not have naming conflicts between modules.","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"The step property is an integer dictating the step number, formally in a  trajectory, of a particular system. The frame has its own set of positions  contained in at_pos property. Each of these positions is of an atom in  residing in the same index in at_list.","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"JResidue structs have the following properties:","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"chainid: chain identifier of the residue in which it belongs\nname: name of the residue as described in the PDB input\nstandard_pdb: whether atoms in the residue are annotated with ATOM or","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"HETATM[2]","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"at_dict: Dict object containing symbols to indices of JAtoms included in","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"the residue","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"[2]: This terminology is borrowed from Chemfiles.","category":"page"},{"location":"start/#Protons-and-hydrogen-bonding","page":"Brief walkthrough","title":"Protons and hydrogen bonding","text":"","category":"section"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"In the DSSP secondary structure assignment scheme, secondary structures are determined from hydrogen bonding patterns between backbone elements. For this, the module provides the HBondDict type for storing information on these.","category":"page"},{"location":"start/#Proton-guessing-and-placement","page":"Brief walkthrough","title":"Proton guessing and placement","text":"","category":"section"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"In some PDB files, positions of protons along the backbone are not given. This is generally the case in lower resolution structures. Adding protons to the backbone of peptide chains can be done through calling","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"addprotons!(frame)","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"This mutates the passed StructureFrame to have protons in its at_list property. Their positions are inferred based on similar rules as with DSSP:","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"The amide bond remains planar with dihedral angle \\pi;\nThe N--H bond has length 1 Angstrom.","category":"page"},{"location":"start/#HBondDict-construct-and-elementary-patterns","page":"Brief walkthrough","title":"HBondDict construct and elementary patterns","text":"","category":"section"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"Note that HBondDict <: AbstractDict, so it can be iterated and accessed like a Dict. The preferred constructor is HBondDict(N) where N in 12. This constructs a hydrogen bonding dictionary for a particular residue. Entries are stored as (index, energy) where index is the index in the res_list property of the original frame to which a specific residue is bonded. These can be accessed using symbols such as :d1 and :a2.","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"As an example, suppose that for a particular residue, we want to record at most two residues acting as either donors or acceptors. After some calculations it was found that a residue at index di acts as a donor with bonding energy Ei and that a residue at index aj acts as an acceptor with bonding energy Ej. This can be stored in a HBondDict as:","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"dict = HBondDict(2)     ## store at most two donor or acceptor residues\ndict[:d1] = (di, Ei)    ## store as a first hbond donor\ndict[:a2] = (aj, Ej)    ## store as a second hbond acceptor","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"Using this construct, simple functions regarding hydrogen bonds in the backbone can be defined. The hbonded function checks the input dictionary of a residue to see if a residue acts as an hydrogen bond acceptor.","category":"page"},{"location":"start/#Geometry","page":"Brief walkthrough","title":"Geometry","text":"","category":"section"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"Certain geometric concepts are also included. Instead of working on the frame objects themselves, the included functions act on points, preferrably SVector{3} objects. These include:","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"distance(a, b): euclidean distance between points A, B;\nanglespan(a, b, c): angle spanned by angleABC;\ndihedral(a, b, c, d): right handed torsion (dihedral) angle between planes","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"spanned by ABC and BCD","category":"page"},{"location":"start/","page":"Brief walkthrough","title":"Brief walkthrough","text":"Unweighted centroids of points and root-mean-square deviations (rmsds) of sets of points can also be calculated.","category":"page"},{"location":"#ProtStructs","page":"Introduction","title":"ProtStructs","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"ProtStructs.jl is a simple project for analyzing protein structures. So far, the project is a layer on Chemfiles.jl, which is used to read PDB files.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The package provides a small and lightweight parser for PDB files. Obtained information is cast into a StructureFrame object. So far, not all a lot of information is extracted from PDB files.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The model of protein structure is completely different from the hierarchical model of BioStructures.jl. In this module, a collection of objects contained in a parent group is represented by a Vector of indices that point to the referred objects.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Abstractions for analysis are planned; however, this will not be until the overall model is polished.","category":"page"},{"location":"#What-does-the-package-provide?","page":"Introduction","title":"What does the package provide?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"ProtStructs.jl aims to provide tools for studying protein structures from crystal structures (as those in PDB files) or in trajectories. Structures for atom trajectories can be borrowed from existing crystal data through lending.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"As of writing, the package provides a way to extract some structural information from Frame objects from Chemfiles.jl. Extracted information is stored in a StructureFrame object. This was the preferred way to obtain structural information through different formats, and this was thought to allow the analysis of changes in structural information from a trajectory.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Naturally, the package aims to provide certain geometric constructs needed for protein structure analysis. These include:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Backbone hydrogen bonding models\nRamachandran plots\nGeometry utilities: distances, angle measures (bond angle, dihedral angle)\nSecondary structure assignment methods (DSSP, STRIDE, KAKSI, etc.)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Since there are many methods for secondary structure assignment methods, it is envisioned that the package can provide the necessary tools for its abstraction. This is can be important for work that requires comparison between methods, or analyses that require nonstandard secondary structure assignments [1].","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"[1]: \"Nonstandard\" here means those that are not DSSP.","category":"page"},{"location":"#More-on-topology-lending-concept","page":"Introduction","title":"More on topology lending concept","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The main contribution of this package is the topology lending concept for protein atom trajectories from simulation data.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"It can be said that generally in simulations with a constant number of atoms, especially for biomolecular simulations involving proteins, the protein topology (atom and residue connectivities) remain the same throughout the simulation [2]. This suggests that there may be no need to allocate data for the protein topology in each recorded frame in a trajectory.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"[2]: Except of course when considering bond breaking in reactive force fields.","category":"page"},{"location":"#Slight-disclaimer","page":"Introduction","title":"Slight disclaimer","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This module does not aim to provide a fast workflow for analyzing protein structures, but a readable set of functions to the original author.","category":"page"}]
}
